# GitHub Actions CI/CD Pipeline for Resona Music Platform

name: 🎵 Resona CI/CD

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
  release:
    types: [ published ]

# Cancel in-progress runs if a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18.x'
  MONGODB_VERSION: '6.0'

jobs:
  # 🔍 Code Quality & Security Checks
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci
          npm ci --prefix backend
          npm ci --prefix frontend

      - name: 🔒 Security Audit
        run: |
          npm audit --audit-level=high --prefix backend
          npm audit --audit-level=high --prefix frontend

      - name: 🧹 Lint Code
        run: |
          npm run lint --prefix backend || true
          npm run lint --prefix frontend || true

      - name: 📊 Code Analysis
        uses: github/super-linter@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_JSON: true
          VALIDATE_MARKDOWN: true
          VALIDATE_YAML: true

  # 🧪 Backend Testing
  backend-tests:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_DATABASE: resona_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install Backend Dependencies
        run: npm ci --prefix backend

      - name: 🔧 Setup Test Environment
        working-directory: backend
        run: |
          cp .env.test.template .env.test
          mkdir -p uploads/test
          mkdir -p logs

      - name: 🧪 Run Backend Tests
        working-directory: backend
        env:
          NODE_ENV: test
          MONGO_URL: mongodb://localhost:27017/resona_test
          JWT_SECRET: test_jwt_secret_key_for_github_actions
        run: |
          npm test -- --coverage --verbose
          npm run test:integration || true

      - name: 📊 Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # 🎨 Frontend Testing & Build
  frontend-tests:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install Frontend Dependencies
        run: npm ci --prefix frontend

      - name: 🧪 Run Frontend Tests
        working-directory: frontend
        run: |
          npm run test -- --coverage --watchAll=false || echo "Frontend tests not fully implemented"

      - name: 🏗️ Build Frontend
        working-directory: frontend
        env:
          VITE_API_URL: https://api.example.com
        run: npm run build

      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ matrix.node-version }}
          path: frontend/dist/
          retention-days: 7

      - name: 📊 Bundle Size Check
        working-directory: frontend
        run: |
          npx bundlesize || echo "Bundle size check not configured"

  # 🌐 E2E Testing
  e2e-tests:
    name: 🌐 E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'pull_request'

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci
          npm ci --prefix backend
          npm ci --prefix frontend

      - name: 🚀 Start Application
        run: |
          # Start backend in background
          cd backend && npm start &
          
          # Wait for backend to be ready
          timeout 60 bash -c 'until curl -f http://localhost:5000/health; do sleep 2; done'
          
          # Build and serve frontend
          cd frontend && npm run build && npm run preview &
          
          # Wait for frontend to be ready
          timeout 60 bash -c 'until curl -f http://localhost:4173; do sleep 2; done'
        env:
          NODE_ENV: test
          MONGO_URL: mongodb://localhost:27017/resona_e2e_test

      - name: 🧪 Run E2E Tests
        run: |
          echo "E2E tests would run here with Playwright or Cypress"
          # npx playwright test

  # 🐳 Docker Build & Security Scan
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build and Push Docker Images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔒 Run Security Scan
        if: github.event_name == 'push'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Security Scan Results
        if: github.event_name == 'push'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # 🚀 Deployment (Production)
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality, backend-tests, frontend-tests, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          echo "Deployment would trigger here via Render API or webhook"
          # curl -X POST "https://api.render.com/deploy/..." \
          #   -H "Authorization: Bearer $RENDER_API_KEY"

      - name: 🔍 Health Check
        run: |
          echo "Post-deployment health check would run here"
          # timeout 300 bash -c 'until curl -f https://your-app.onrender.com/health; do sleep 10; done'

  # 📊 Performance Monitoring
  performance-monitoring:
    name: 📊 Performance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [frontend-tests]
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-18.x
          path: frontend/dist/

      - name: ⚡ Lighthouse Performance Test
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # 📋 Release Notes
  release:
    name: 📋 Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [code-quality, backend-tests, frontend-tests]

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📋 Generate Release Notes
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id
            });
            
            console.log(`Release created: ${release.name}`);
            console.log(`Release body: ${release.body}`);

      - name: 🎉 Post to Discussions
        run: |
          echo "New release announcement would be posted here"
