# Docker Compose configuration for production deployment

version: '3.8'

services:
  # üóÑÔ∏è MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: resona-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: resona
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./backend/scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - resona-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ‚ö° Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: resona-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      MONGO_URL: mongodb://mongodb:27017/resona
      JWT_SECRET: ${JWT_SECRET}
      PORT: 5000
      ALLOWED_ORIGINS: ${FRONTEND_URL}
    ports:
      - "5000:5000"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - resona-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # üé® Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${BACKEND_URL}
    container_name: resona-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - resona-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üóÑÔ∏è Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: resona-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - resona-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üåê Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: resona-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./backend/uploads:/var/www/uploads:ro
    depends_on:
      - frontend
      - backend
    networks:
      - resona-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  resona-network:
    driver: bridge
